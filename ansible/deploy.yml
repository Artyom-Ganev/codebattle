---
- hosts: webservers
  gather_facts: no

  tasks:
    - template:
        src: environment.j2
        dest: "{{ codebattle_env_file }}"
      tags: env

    - name: download app image
      docker_image:
        name: "{{ codebattle_app_image_name }}:latest"
        force: yes

    - name: download image for nginx
      docker_image:
        name: "{{ codebattle_nginx_image_name }}"
        force: yes
      tags: [nginx]

    - name: run migrations
      docker_container:
        recreate: yes
        detach: no
        name: codebattle-migrations
        command: "mix ecto.migrate"
        image: "{{ codebattle_app_image_name }}:latest"
        network_mode: host
        state: started
        env_file: "{{ codebattle_env_file }}"
        env:
          MIX_ENV: prod
        volumes:
          - "/tmp:/tmp"
          - "/var/tmp:/var/tmp"
      run_once: yes
      tags: [webserver]

    - name: start application
      docker_container:
        recreate: yes
        name: codebattle-web
        image: "{{ codebattle_app_image_name }}:latest"
        state: started
        network_mode: host
        restart_policy: always
        env_file: "{{ codebattle_env_file }}"
        env:
          MIX_ENV: prod
          NODE_ENV: production
        ports:
          - "4000:{{ codebattle_port }}"
        volumes:
          - "/var/run/docker.sock:/var/run/docker.sock"
          - "/var/log/codebattle/:/var/log/codebattle/"
          - "/tmp:/tmp"
          - "/home/deploy/battle_asserts/issues:/tmp/issues"
          - "/opt:/opt"
          - "/var/tmp:/var/tmp"
      tags: [webserver]

    - name: start nginx
      docker_container:
        recreate: yes
        name: codebattle-nginx
        image: "{{ codebattle_nginx_image_name }}"
        state: started
        restart_policy: always
        log_driver: syslog
        network_mode: host
        ports:
          - "80:80"
      tags: [nginx]

    - name: prune docker images
      shell: docker rmi -f $(docker images | grep "<none>" | awk '{print $3}')
